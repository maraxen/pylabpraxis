import pytest
from unittest.mock import MagicMock, patch
from uuid import uuid4

from praxis.backend.core.workcell import Workcell
from praxis.backend.core.protocols.filesystem import IFileSystem as FileSystem
from praxis.backend.models.pydantic_internals.machine import MachineCreate
from praxis.backend.models.pydantic_internals.resource import ResourceCreate
from praxis.backend.models.enums.asset import AssetType


@pytest.fixture
def mock_file_system() -> MagicMock:
    """Fixture for a mocked FileSystem."""
    return MagicMock(spec=FileSystem)


@pytest.fixture
def workcell(mock_file_system: MagicMock) -> Workcell:
    """Fixture for a Workcell instance with a mocked file system."""
    return Workcell(name="Test Workcell", file_system=mock_file_system)


@pytest.fixture
def machine_asset() -> MachineCreate:
    """A pure machine asset."""
    return MachineCreate(
        name="robot_arm",
        asset_type=AssetType.MACHINE,
        fqn="some.robot.arm.class",
    )


@pytest.fixture
def resource_asset() -> ResourceCreate:
    """A pure resource asset."""
    return ResourceCreate(
        name="96_well_plate",
        asset_type=AssetType.RESOURCE,
        fqn="some.plate.class",
    )


class TestWorkcell:
    """Tests for the Workcell class."""

    def test_workcell_init(self, workcell: Workcell, mock_file_system: MagicMock):
        """Test that the workcell is initialized correctly."""
        assert workcell.name == "Test Workcell"
        assert workcell.file_system == mock_file_system
        assert workcell.assets == {}
        assert workcell.layout == {}
        assert workcell.machines == {}
        assert workcell.resources == {}

    @patch("praxis.backend.core.workcell.uuid4", return_value=uuid4())
    def test_add_asset_returns_key(self, mock_uuid, workcell: Workcell, machine_asset: MachineCreate):
        """Test that add_asset returns a unique key."""
        asset_key = workcell.add_asset(asset=machine_asset)
        assert asset_key == str(mock_uuid.return_value)

    def test_add_pure_machine_asset(self, workcell: Workcell, machine_asset: MachineCreate):
        """Test adding a pure machine asset to the workcell."""
        asset_key = workcell.add_asset(asset=machine_asset)
        assert asset_key in workcell.assets
        assert workcell.assets[asset_key] == machine_asset
        assert machine_asset.name in workcell.machines
        assert workcell.machines[machine_asset.name] == machine_asset

    def test_add_pure_resource_asset(
        self, workcell: Workcell, resource_asset: ResourceCreate
    ):
        """Test adding a pure resource asset to the workcell."""
        asset_key = workcell.add_asset(asset=resource_asset)
        assert asset_key in workcell.assets
        assert workcell.assets[asset_key] == resource_asset
        assert resource_asset.name in workcell.resources
        assert workcell.resources[resource_asset.name] == resource_asset

    def test_workcell_layout_assignment(self, workcell: Workcell, machine_asset: MachineCreate):
        """Test assigning an asset to a layout position."""
        asset_key = workcell.add_asset(asset=machine_asset)
        workcell.layout["A1"] = asset_key
        assert workcell.layout["A1"] == asset_key

    def test_get_asset_by_layout_position(self, workcell: Workcell, resource_asset: ResourceCreate):
        """Test retrieving an asset by its layout position."""
        asset_key = workcell.add_asset(asset=resource_asset)
        workcell.layout["B2"] = asset_key
        retrieved_asset = workcell.get_asset_by_position("B2")
        assert retrieved_asset == resource_asset

    def test_get_asset_by_invalid_position(self, workcell: Workcell):
        """Test that getting an asset from an empty/invalid position returns None."""
        assert workcell.get_asset_by_position("C3") is None