// Mocks generated by Mockito 5.4.5 from annotations
// in praxis_lab_management/test/mocks/mock_services.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:praxis_lab_management/src/data/models/deck_layout_orm.dart'
    as _i5;
import 'package:praxis_lab_management/src/data/models/resource_definition_catalog_orm.dart'
    as _i3;
import 'package:praxis_lab_management/src/data/models/resource_instance_orm.dart'
    as _i4;
import 'package:praxis_lab_management/src/data/models/managed_device_orm.dart'
    as _i2;
import 'package:praxis_lab_management/src/data/models/protocol/deck_layout.dart'
    as _i6;
import 'package:praxis_lab_management/src/data/services/asset_api_service.dart'
    as _i7;
import 'package:praxis_lab_management/src/data/services/workcell_api_service.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeManagedDeviceOrm_0 extends _i1.SmartFake
    implements _i2.ManagedDeviceOrm {
  _FakeManagedDeviceOrm_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResourceDefinitionCatalogOrm_1 extends _i1.SmartFake
    implements _i3.ResourceDefinitionCatalogOrm {
  _FakeResourceDefinitionCatalogOrm_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

class _FakeResourceInstanceOrm_2 extends _i1.SmartFake
    implements _i4.ResourceInstanceOrm {
  _FakeResourceInstanceOrm_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeckLayoutOrm_3 extends _i1.SmartFake implements _i5.DeckLayoutOrm {
  _FakeDeckLayoutOrm_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeckLayout_4 extends _i1.SmartFake implements _i6.DeckLayout {
  _FakeDeckLayout_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AssetApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssetApiService extends _i1.Mock implements _i7.AssetApiService {
  MockAssetApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i2.ManagedDeviceOrm>> getDevices() =>
      (super.noSuchMethod(
            Invocation.method(#getDevices, []),
            returnValue: _i8.Future<List<_i2.ManagedDeviceOrm>>.value(
              <_i2.ManagedDeviceOrm>[],
            ),
          )
          as _i8.Future<List<_i2.ManagedDeviceOrm>>);

  @override
  _i8.Future<_i2.ManagedDeviceOrm> createDevice(_i2.ManagedDeviceOrm? device) =>
      (super.noSuchMethod(
            Invocation.method(#createDevice, [device]),
            returnValue: _i8.Future<_i2.ManagedDeviceOrm>.value(
              _FakeManagedDeviceOrm_0(
                this,
                Invocation.method(#createDevice, [device]),
              ),
            ),
          )
          as _i8.Future<_i2.ManagedDeviceOrm>);

  @override
  _i8.Future<_i2.ManagedDeviceOrm> getDeviceById(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#getDeviceById, [deviceId]),
            returnValue: _i8.Future<_i2.ManagedDeviceOrm>.value(
              _FakeManagedDeviceOrm_0(
                this,
                Invocation.method(#getDeviceById, [deviceId]),
              ),
            ),
          )
          as _i8.Future<_i2.ManagedDeviceOrm>);

  @override
  _i8.Future<_i2.ManagedDeviceOrm> updateDevice(
    String? deviceId,
    _i2.ManagedDeviceOrm? device,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateDevice, [deviceId, device]),
            returnValue: _i8.Future<_i2.ManagedDeviceOrm>.value(
              _FakeManagedDeviceOrm_0(
                this,
                Invocation.method(#updateDevice, [deviceId, device]),
              ),
            ),
          )
          as _i8.Future<_i2.ManagedDeviceOrm>);

  @override
  _i8.Future<void> deleteDevice(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDevice, [deviceId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> connectDevice(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#connectDevice, [deviceId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> initializeDevice(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#initializeDevice, [deviceId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> disconnectDevice(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#disconnectDevice, [deviceId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<List<_i3.ResourceDefinitionCatalogOrm>> getResourceDefinitions() =>
      (super.noSuchMethod(
            Invocation.method(#getResourceDefinitions, []),
            returnValue:
                _i8.Future<List<_i3.ResourceDefinitionCatalogOrm>>.value(
                  <_i3.ResourceDefinitionCatalogOrm>[],
                ),
          )
          as _i8.Future<List<_i3.ResourceDefinitionCatalogOrm>>);

  @override
  _i8.Future<_i3.ResourceDefinitionCatalogOrm> createResourceDefinition(
    _i3.ResourceDefinitionCatalogOrm? resourceDefinition,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createResourceDefinition, [resourceDefinition]),
            returnValue: _i8.Future<_i3.ResourceDefinitionCatalogOrm>.value(
              _FakeResourceDefinitionCatalogOrm_1(
                this,
                Invocation.method(#createResourceDefinition, [
                  resourceDefinition,
                ]),
              ),
            ),
          )
          as _i8.Future<_i3.ResourceDefinitionCatalogOrm>);

  @override
  _i8.Future<_i3.ResourceDefinitionCatalogOrm> updateResourceDefinition(
    String? resourceDefinitionId,
    _i3.ResourceDefinitionCatalogOrm? resourceDefinition,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateResourceDefinition, [
              resourceDefinitionId,
              resourceDefinition,
            ]),
            returnValue: _i8.Future<_i3.ResourceDefinitionCatalogOrm>.value(
              _FakeResourceDefinitionCatalogOrm_1(
                this,
                Invocation.method(#updateResourceDefinition, [
                  resourceDefinitionId,
                  resourceDefinition,
                ]),
              ),
            ),
          )
          as _i8.Future<_i3.ResourceDefinitionCatalogOrm>);

  @override
  _i8.Future<void> deleteResourceDefinition(String? resourceDefinitionId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteResourceDefinition, [
              resourceDefinitionId,
            ]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<List<_i4.ResourceInstanceOrm>> getResourceInstances() =>
      (super.noSuchMethod(
            Invocation.method(#getResourceInstances, []),
            returnValue: _i8.Future<List<_i4.ResourceInstanceOrm>>.value(
              <_i4.ResourceInstanceOrm>[],
            ),
          )
          as _i8.Future<List<_i4.ResourceInstanceOrm>>);

  @override
  _i8.Future<_i4.ResourceInstanceOrm> createResourceInstance(
    _i4.ResourceInstanceOrm? resourceInstance,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createResourceInstance, [resourceInstance]),
            returnValue: _i8.Future<_i4.ResourceInstanceOrm>.value(
              _FakeResourceInstanceOrm_2(
                this,
                Invocation.method(#createResourceInstance, [resourceInstance]),
              ),
            ),
          )
          as _i8.Future<_i4.ResourceInstanceOrm>);

  @override
  _i8.Future<_i4.ResourceInstanceOrm> getResourceInstanceById(
    String? instanceId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getResourceInstanceById, [instanceId]),
            returnValue: _i8.Future<_i4.ResourceInstanceOrm>.value(
              _FakeResourceInstanceOrm_2(
                this,
                Invocation.method(#getResourceInstanceById, [instanceId]),
              ),
            ),
          )
          as _i8.Future<_i4.ResourceInstanceOrm>);

  @override
  _i8.Future<_i4.ResourceInstanceOrm> updateResourceInstance(
    String? instanceId,
    _i4.ResourceInstanceOrm? resourceInstance,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateResourceInstance, [
              instanceId,
              resourceInstance,
            ]),
            returnValue: _i8.Future<_i4.ResourceInstanceOrm>.value(
              _FakeResourceInstanceOrm_2(
                this,
                Invocation.method(#updateResourceInstance, [
                  instanceId,
                  resourceInstance,
                ]),
              ),
            ),
          )
          as _i8.Future<_i4.ResourceInstanceOrm>);

  @override
  _i8.Future<void> deleteResourceInstance(String? instanceId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteResourceInstance, [instanceId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<List<_i5.DeckLayoutOrm>> getDeckLayouts() =>
      (super.noSuchMethod(
            Invocation.method(#getDeckLayouts, []),
            returnValue: _i8.Future<List<_i5.DeckLayoutOrm>>.value(
              <_i5.DeckLayoutOrm>[],
            ),
          )
          as _i8.Future<List<_i5.DeckLayoutOrm>>);

  @override
  _i8.Future<_i5.DeckLayoutOrm> createDeckLayout(
    _i5.DeckLayoutOrm? deckLayout,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createDeckLayout, [deckLayout]),
            returnValue: _i8.Future<_i5.DeckLayoutOrm>.value(
              _FakeDeckLayoutOrm_3(
                this,
                Invocation.method(#createDeckLayout, [deckLayout]),
              ),
            ),
          )
          as _i8.Future<_i5.DeckLayoutOrm>);

  @override
  _i8.Future<_i5.DeckLayoutOrm> getDeckLayoutById(String? deckLayoutId) =>
      (super.noSuchMethod(
            Invocation.method(#getDeckLayoutById, [deckLayoutId]),
            returnValue: _i8.Future<_i5.DeckLayoutOrm>.value(
              _FakeDeckLayoutOrm_3(
                this,
                Invocation.method(#getDeckLayoutById, [deckLayoutId]),
              ),
            ),
          )
          as _i8.Future<_i5.DeckLayoutOrm>);

  @override
  _i8.Future<_i5.DeckLayoutOrm> updateDeckLayout(
    String? deckLayoutId,
    _i5.DeckLayoutOrm? deckLayout,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateDeckLayout, [deckLayoutId, deckLayout]),
            returnValue: _i8.Future<_i5.DeckLayoutOrm>.value(
              _FakeDeckLayoutOrm_3(
                this,
                Invocation.method(#updateDeckLayout, [
                  deckLayoutId,
                  deckLayout,
                ]),
              ),
            ),
          )
          as _i8.Future<_i5.DeckLayoutOrm>);

  @override
  _i8.Future<void> deleteDeckLayout(String? deckLayoutId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDeckLayout, [deckLayoutId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}

/// A class which mocks [WorkcellApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkcellApiService extends _i1.Mock
    implements _i9.WorkcellApiService {
  MockWorkcellApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i6.DeckLayout> fetchDeckState(String? workcellId) =>
      (super.noSuchMethod(
            Invocation.method(#fetchDeckState, [workcellId]),
            returnValue: _i8.Future<_i6.DeckLayout>.value(
              _FakeDeckLayout_4(
                this,
                Invocation.method(#fetchDeckState, [workcellId]),
              ),
            ),
          )
          as _i8.Future<_i6.DeckLayout>);

  @override
  _i8.Stream<dynamic> subscribeToWorkcellUpdates(String? workcellId) =>
      (super.noSuchMethod(
            Invocation.method(#subscribeToWorkcellUpdates, [workcellId]),
            returnValue: _i8.Stream<dynamic>.empty(),
          )
          as _i8.Stream<dynamic>);

  @override
  _i8.Future<void> closeWebSocket() =>
      (super.noSuchMethod(
            Invocation.method(#closeWebSocket, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}
