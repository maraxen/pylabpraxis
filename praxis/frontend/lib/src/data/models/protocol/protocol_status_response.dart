// FILE: lib/src/data/models/protocol/protocol_status_response.dart
// Purpose: Defines the response structure when starting or querying protocol status.
// Corresponds to: ProtocolStatusResponse in protocol.models.ts

import 'package:freezed_annotation/freezed_annotation.dart';

part 'protocol_status_response.freezed.dart';
part 'protocol_status_response.g.dart';

// Enum for different run statuses
enum RunStatus {
  // Initial states
  pending, // Protocol is queued but not yet started
  preparing, // System is preparing to run the protocol
  // Active states
  running,
  paused,
  cancelling, // In the process of stopping
  // Terminal states
  succeeded,
  failed,
  cancelled, // Successfully stopped before completion
  unknown, // Status cannot be determined
}

@freezed
abstract class ProtocolStatusResponse with _$ProtocolStatusResponse {
  const factory ProtocolStatusResponse({
    // Unique identifier for the protocol run.
    required String runId,
    // Current status of the protocol execution.
    required RunStatus status,
    // Optional: A message providing more details about the current status or any errors.
    String? message,
    // Optional: Timestamp of when this status was recorded or updated.
    DateTime? timestamp,
    // Optional: Progress of the protocol execution (e.g., percentage, current step).
    // This could be a simple number or a more complex object.
    dynamic
    progress, // e.g., { "current_step": "step_3", "total_steps": 10, "percentage": 30 }
    // Optional: Any results or data generated by the protocol up to this point.
    Map<String, dynamic>? results,
    // Optional: Estimated time remaining.
    @JsonKey(name: 'estimated_time_remaining')
    String? estimatedTimeRemaining, // e.g., "PT10M"
    // Optional: Link to detailed logs or further information about the run.
    String? logsUrl,
  }) = _ProtocolStatusResponse;

  factory ProtocolStatusResponse.fromJson(Map<String, dynamic> json) =>
      _$ProtocolStatusResponseFromJson(json);
}
