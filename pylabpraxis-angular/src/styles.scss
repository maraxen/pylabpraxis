// pylabpraxis-angular/src/styles.scss

// 0. Import built-in Sass modules
@use 'sass:map'; // Import the sass:map module to use map.get

// 1. Import Angular Material core and theming
@use '@angular/material' as mat;

// 2. Import your existing Material theme color definitions
@use './_theme-colors.scss' as theme-colors; // Assuming _theme-colors.scss is in the same directory

// 3. Define CSS Custom Properties for fonts and explicit color overrides
:root {
  // Light Mode Colors (explicit overrides or for non-Material elements)
  --app-text-color-light: #ED7A9B;
  --app-background-color-light: #FFFFFF;
  --app-surface-color-light: #{map.get(theme-colors.$neutral-palette, 98)}; // Very light grey for cards, from your palette
  --app-primary-action-color: #{map.get(theme-colors.$primary-palette, 60)}; // Your #ED7A9B is likely around here

  // Dark Mode Colors (explicit overrides or for non-Material elements)
  --app-text-color-dark: #ED7A9B; // Your desired pink text on dark
  --app-background-color-dark: #{map.get(theme-colors.$neutral-palette, 6)}; // Very dark grey / near black, from your palette
  --app-surface-color-dark: #{map.get(theme-colors.$neutral-palette, 12)}; // Darker surface for cards, from your palette

  // Font settings (from your selection: "Precise & Modern" - Base)
  --app-font-family: 'RobotoFlex', sans-serif; // Define the font family stack
  --app-base-font-variation-settings: 'slnt' 0, 'wdth' 95, 'wght' 400, 'GRAD' 0, 'XTRA' 74, 'XOPQ' 426, 'YTAS' 772, 'YTDE' -220, 'YTFI' 721, 'YTLC' 485, 'YTUC' 721;
  // Navigation font settings (from your selection: "Precise & Modern" - Navigation)
  --app-nav-font-variation-settings: 'slnt' 0, 'wdth' 100, 'wght' 500, 'GRAD' 25, 'XTRA' 74, 'XOPQ' 426, 'YTAS' 772, 'YTDE' -220, 'YTFI' 721, 'YTLC' 485, 'YTUC' 721;
}

// 4. Define Angular Material Typography (Simplified for mat.theme)
// As per docs, for mat.theme, typography can be a string (font family)
// or a map for plain/brand families and weights.
// We'll use the CSS variable string directly.
// The actual font-variation-settings will be applied via CSS.
$app-font-family-string: var(--app-font-family);

// 5. Define the base theme configuration using your palettes
// This map structure is used by the mat.theme mixin
$light-theme-configuration: (
  color: (primary: theme-colors.$primary-palette,
    tertiary: theme-colors.$tertiary-palette,
    // theme-type: light, // Optional: if not relying on color-scheme for light-dark()
    // If specified, `color-scheme: light;` should also be set on html for this theme.
  ),
  typography: $app-font-family-string,
  // Use the simple font family string
  density: 0,
);

// Define a similar configuration for the dark theme
$dark-theme-configuration: (
  color: (primary: theme-colors.$primary-palette, // Or a dark-specific primary if needed
    tertiary: theme-colors.$tertiary-palette,
    // theme-type: dark, // Optional: if not relying on color-scheme for light-dark()
    // If specified, `color-scheme: dark;` should also be set on .dark-mode for this theme.
  ),
  typography: $app-font-family-string,
  // Use the simple font family string
  density: 0,
);

// 6. Apply Angular Material core styles (should be included only once)
// Make sure RobotoFlex is loaded via angular.json or a @font-face rule in this file or index.html
/*
@font-face {
  font-family: 'RobotoFlex';
  src: url('/path/to/RobotoFlex-VariableFont_GRAD,XTRA,YOPQ,YTAS,YTDE,YTFI,YTLC,YTUC,opsz,slnt,wdth,wght.ttf') format('truetype-variations');
  font-weight: 100 1000; // Range of weights supported by the variable font
  font-stretch: 75% 125%; // Range of widths supported
}
*/
@include mat.core();


// 7. Apply themes and overrides
html {
  // Apply light theme by default
  color-scheme: light; // For light-dark() CSS function if theme-type isn't explicit in color map
  @include mat.theme($light-theme-configuration, $overrides: ( // System-level token overrides for light mode
      color-surface-container-lowest: var(--app-background-color-light),
      color-surface-container: map.get(theme-colors.$neutral-palette, 98), // Card backgrounds etc.
      color-on-surface: map.get(theme-colors.$primary-palette, 40), // Text on card backgrounds
      color-on-surface-variant: map.get(theme-colors.$primary-palette, 30),
      color-primary: map.get(theme-colors.$primary-palette, 60), // Main action color (your #ED7A9B)
      color-on-primary: map.get(theme-colors.$primary-palette, 100), // Text on primary action color (e.g., white on pink buttons)
      color-background: var(--app-background-color-light), // Main page background
      color-on-background: map.get(theme-colors.$primary-palette, 40), // Text on main page background (darker pink for accessibility)

      // Explicitly set secondary and error tokens using your defined palettes if needed
      color-secondary: map.get(theme-colors.$secondary-palette, 40), // Example for light theme
      color-on-secondary: map.get(theme-colors.$secondary-palette, 100),
      color-secondary-container: map.get(theme-colors.$secondary-palette, 90),
      color-on-secondary-container: map.get(theme-colors.$secondary-palette, 10),

      color-error: map.get(theme-colors.$error-palette, 40), // Example for light theme
      color-on-error: map.get(theme-colors.$error-palette, 100),
      color-error-container: map.get(theme-colors.$error-palette, 90),
      color-on-error-container: map.get(theme-colors.$error-palette, 10)));

  // Apply global styles for html and body, using CSS custom properties
  font-family: var(--app-font-family);
  font-variation-settings: var(--app-base-font-variation-settings);
  font-optical-sizing: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1.5;
  height: 100%;
  margin: 0;
  padding: 0;
}

body {
  background-color: var(--app-background-color-light); // Uses CSS var for white
  color: var(--app-text-color-light); // Your #ED7A9B for general non-Material text
  height: 100%;
  margin: 0;
  // For body text to align with Material Design's on-background token (darker pink):
  // background: var(--mat-sys-color-background);
  // color: var(--mat-sys-color-on-background);
}

// Styles for specific elements like navigation (example)
.your-navbar-class {
  // Replace with your actual navbar selector
  font-variation-settings: var(--app-nav-font-variation-settings);
  // Example:
  // background-color: var(--mat-sys-color-surface-container);
  // color: var(--mat-sys-color-on-surface);
}

// Example for Material buttons to use nav font (if desired)
button[mat-button],
button[mat-raised-button],
button[mat-flat-button],
button[mat-stroked-button] {

  // Targeting the inner text element for MDC components
  .mdc-button__label,
  span.mat-mdc-button-persistent-ripple {
    // More specific target for text within button
    font-family: var(--app-font-family) !important; // Ensure override
    font-variation-settings: var(--app-nav-font-variation-settings) !important; // Ensure override
  }
}

// Apply Dark Mode Theme
.dark-mode {
  color-scheme: dark; // For light-dark() CSS function
  @include mat.theme($dark-theme-configuration, $overrides: ( // System-level token overrides for dark mode
      color-surface-container-lowest: var(--app-background-color-dark),
      color-surface-container: map.get(theme-colors.$neutral-palette, 12), // Dark card backgrounds
      color-on-surface: map.get(theme-colors.$primary-palette, 80), // Light pink text on dark cards
      color-on-surface-variant: map.get(theme-colors.$primary-palette, 90),
      color-primary: map.get(theme-colors.$primary-palette, 70), // Main action color (lighter pink)
      color-on-primary: map.get(theme-colors.$primary-palette, 10), // Dark text on pink buttons
      color-background: var(--app-background-color-dark), // Main page background (black/dark)
      color-on-background: var(--app-text-color-dark), // Your #ED7A9B text on main dark background

      // Explicitly set secondary and error tokens for dark mode
      color-secondary: map.get(theme-colors.$secondary-palette, 80), // Example for dark theme
      color-on-secondary: map.get(theme-colors.$secondary-palette, 20),
      color-secondary-container: map.get(theme-colors.$secondary-palette, 30),
      color-on-secondary-container: map.get(theme-colors.$secondary-palette, 90),

      color-error: map.get(theme-colors.$error-palette, 80), // Example for dark theme
      color-on-error: map.get(theme-colors.$error-palette, 20),
      color-error-container: map.get(theme-colors.$error-palette, 30),
      color-on-error-container: map.get(theme-colors.$error-palette, 90)));

  // Override global body styles for dark mode using CSS variables
  &,
  body {
    // Apply to .dark-mode itself or body if .dark-mode is on html
    background-color: var(--app-background-color-dark);
    color: var(--app-text-color-dark);
    // For body text to align with Material Design's on-background token (your #ED7A9B):
    // background: var(--mat-sys-color-background);
    // color: var(--mat-sys-color-on-background);
  }

  .your-navbar-class {
    // Potentially adjust navbar background/text for dark mode if not handled by Material tokens
    // Example:
    // background-color: var(--mat-sys-color-surface-container);
    // color: var(--mat-sys-color-on-surface);
  }
}

// Optional: High contrast mode overrides (if you want to use the mixin from _theme-colors.scss)
// .high-contrast-mode {
//   @include theme-colors.high-contrast-overrides(light); // or dark
// }